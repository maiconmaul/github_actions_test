name: Exericio Pipeline

on:
  push:
    branches:
      - main
      
  # pull_request:
  #   branches:
  #     - main
 
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Testar secrets
        run: echo "Secrets configuradas corretamente!"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          EMAIL_ORIGEM: ${{ secrets.EMAIL_ORIGEM }}
          EMAIL_DESTINO: ${{ secrets.EMAIL_DESTINO }}
          SENHA_EMAIL: ${{ secrets.SENHA_EMAIL }}

      - name: Checar reposit√≥rio
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0
    
      - uses: actions/setup-node@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20.x
 
      - name: Install dependencies
        run: yarn
 
      - name: Build application
        run: yarn build

      - name: Instalar semver
        run: npm install -g semver

      - name: Criar nova tag caso n√£o exista
        id: create_initial_tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ -z "$(git tag)" ]; then
            git config --global user.name 'github-actions'
            git config --global user.email 'github-actions@github.com'
            git tag -a v0.0.0 -m "Initial release"
            git push origin v0.0.0
          fi

      - name: Calcular nova vers√£o
        id: version
        run: |
          git fetch --tags
          
          # Pega a √∫ltima tag v√°lida em formato semver (X.Y.Z)
          LAST_TAG=$(git tag --sort=-v:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)

          # Se n√£o houver tags, define v0.0.0
          if [ -z "$LAST_TAG" ]; then
            LAST_TAG="v0.0.0"
          fi
          echo "Vers√£o Atual: $LAST_TAG"

          # Remove o prefixo 'v' caso exista
          CURRENT_VERSION=${LAST_TAG#v}

          # Inicializa flags de incremento
          MAJOR=0
          MINOR=0
          PATCH=0

          # Obt√©m commits desde a √∫ltima vers√£o v√°lida
          if [ "$LAST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
          fi

          echo "Commits desde a √∫ltima tag:"
          echo "$COMMITS"

          # Verifica mensagens de commit
          while read -r COMMIT; do
            if [[ "$COMMIT" == *"BREAKING CHANGE"* ]]; then
              MAJOR=1
            elif [[ "$COMMIT" == *"feat"* ]]; then
              MINOR=1
            elif [[ "$COMMIT" == *"fix"* ]]; then
              PATCH=1
            fi
          done <<< "$COMMITS"

          # Calcula nova vers√£o
          if [[ $MAJOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i major $CURRENT_VERSION)
          elif [[ $MINOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i minor $CURRENT_VERSION)
          elif [[ $PATCH -eq 1 ]]; then
            NEW_VERSION=$(semver -i patch $CURRENT_VERSION)
          else
            NEW_VERSION=$CURRENT_VERSION
          fi

          echo "Nova vers√£o: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Atualizar vers√£o no package.json
        run: |
          CURRENT_PKG_VERSION=$(node -p "require('./package.json').version")

          if [ "$CURRENT_PKG_VERSION" != "${{ env.new_version }}" ]; then
            npm version ${{ env.new_version }} --no-git-tag-version
            echo "Vers√£o atualizada para ${{ env.new_version }}"
          else
            echo "A vers√£o j√° √© ${{ env.new_version }}, nenhuma altera√ß√£o necess√°ria."
          fi

      - name: Commit e push
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          
          if git diff --exit-code; then
            echo "Nenhuma mudan√ßa para commit"
          else
            git add package.json
            git commit -m "chore(release): version ${{ env.new_version }}"
            if git rev-parse "v${{ env.new_version }}" >/dev/null 2>&1; then
              echo "Tag v${{ env.new_version }} j√° existe, ignorando..."
            else
              git tag "v${{ env.new_version }}"
              git push origin "v${{ env.new_version }}"
            fi
            git push origin main --follow-tags
          fi

      - name: Enviar e-mail falha
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_ORIGEM }}
          password: ${{ secrets.SENHA_EMAIL }}
          subject: Falha no workflow do GitHub Actions
          body: O workflow falhou no passo de testes.
          to: ${{ secrets.EMAIL_DESTINO }}
          from: ${{ secrets.EMAIL_ORIGEM }}

      - name: Enviar e-mail sucesso
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_ORIGEM }}
          password: ${{ secrets.SENHA_EMAIL }}
          subject: Sucesso no workflow do GitHub Actions
          body: O workflow foi executado com sucesso! üéâ
          to: ${{ secrets.EMAIL_DESTINO }}
          from: ${{ secrets.EMAIL_ORIGEM }}